openapi: 3.0.3
info:
  title: MoreWay
  version: 1.0.0
servers:
  - url: https://localhost:80/api/v1
tags:
  - name: auth
    description: Регистрация и авторизация
  - name: places
    description: Достопримечательности
  - name: routes
    description: Маршруты
  - name: users
    description: Пользователи
  - name: achievements
    description: Достижения
  - name: chats
    description: Чаты
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Авторизация
      description: Авторизация по логину и паролю.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthInfo'

      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccess'
        '401':
          description: Неправильный пароль или почта
        '400':
          description: Невалидные данные
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/AuthError'
               
  /auth/registr:
    post:
      tags:
        - auth
      summary: Регистрация
      description: Регистрация по логину и паролю
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthInfo'

      responses:
        '201':
          description: Успешная регистрация
        '400':
          description: Невалидные данные
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/AuthError'
  
  /places:
    get:
      tags:
        - places
      summary: Получение списка всех достопримечательностей, доступных в системе
      security:
        - bearerAuth: [] 
      responses:
        '200':
          description: Успешное получение данных
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetPlaces'
        '401':
          description: Невалидный токен
          
  /places/{placeId}:
    get:
      parameters:
        - name: placeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - places
      summary: Получение подробной информации о достопримечательности по ее идентификатору
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное получение данных
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetPlace'
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
    delete:
      parameters:
        - name: placeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - places
      summary: Удаление достопримечательности из системы
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Успешное удаление данных
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
          
  /places/{placeId}/comments:
    get:
      parameters:
        - name: placeId
          in: path
          required: true
          schema:
            type: number
        - name: pageIndex
          in: query
          required: false
          schema:
            type: number
      tags:
        - places
      summary: Получение списка комментариев к достопримечательности
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное получение данных
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetComments'
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
    post:
      parameters:
        - name: placeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - places
      summary: Добавление комментария к достопримечательности
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostComment'
      responses:
        '201':
          description: Успешное добавление комментария
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetComment'
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
          
  /places/{placeId}/rating:
    post:
      parameters:
        - name: placeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - places
      summary: Добавление оценки достопримечательности 
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRating'
      responses:
        '201':
          description: Рейтинг был успешно добавлен
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
  /routes:
    get:
      tags:
        - routes
      summary: Получение списка всех маршрутов, доступных в системе 
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное получение данных
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetRoutes'
        '401':
          description: Невалидный токен
    post:
      tags:
        - routes
      summary: Создание маршрута 
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRoute'
      responses:
        '201':
          description: Успешное создание маршрута
        '401':
          description: Невалидный токен
  
  /routes/{routeId}:
    get:
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - routes
      summary: Получение полной информации о маршруте по его идентификатору
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное получение данных
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetRoute'
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
    patch:
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - routes
      summary: Обновление данных маршрута
      security:
        - bearerAuth: []
      requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/PatchRoute'
      responses:
        '200':
          description: Успешное обновление маршрута
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
    delete:
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - routes
      summary: Удаление маршрута из системы
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Успешное удаление маршрута
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
    put:
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - routes
      summary: Изменение маршрута
      security:
        - bearerAuth: []
      requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/PutRoute'
      responses:
        '201':
          description: Успешное изменение маршрута
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
  
  /routes/{routeId}/comments:
    get:
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: number
        - name: pageIndex
          in: query
          required: false
          schema:
            type: number
      tags:
        - routes
      summary: Получение списка комментариев к маршруту
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное получение данных
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetComments'
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
    post:
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - routes
      summary: Добавление комментария к маршруту
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostComment'
      responses:
        '201':
          description: Успешное добавление комментария
          content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetComment'
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
  
  /routes/{routeId}/rating:
    post:
      parameters:
        - name: routeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - routes
      summary: Добавление оценки маршруту 
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRating'
      responses:
        '201':
          description: Рейтинг был успешно добавлен
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
  
  /users/{userId}:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Получение полной информации о пользователе по его идентификатору 
      security:
       - bearerAuth: []
      responses:
       '200':
         description: Успешное получение данных
         content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetUser'
       '401':
         description: Невалидный токен
    patch:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Изменение данных пользователя 
      security:
       - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser'
      responses:
       '200':
         description: Успешное изменение данных
         content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetUser'
       '401':
         description: Невалидный токен
    delete:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Удаление аккаунта пользователя 
      security:
       - bearerAuth: []
      responses:
       '204':
         description: Успешное удаление аккаунта
       '401':
         description: Невалидный токен
      
  
  /users/{userId}/avatar:
    post:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Обновление аватара пользователя
      security:
       - bearerAuth: []
      responses:
       '200':
         description: Успешное получение данных
         content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetUserAvatar'
       '401':
         description: Невалидный токен
  
  /users/{userId}/password:
    post:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Изменение пароля пользователя
      security:
       - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserPassword'
      responses:
        '204':
          description: Успешное изменение пароля
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
  
         
  /users/{userId}/routes:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Получение списка маршрутов, созданных пользователем 
      security:
       - bearerAuth: []
      responses:
       '200':
         description: Успешное получение данных
         content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetRoutes'
       '401':
         description: Невалидный токен
         
  /users/{userId}/routes/favorite:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Получение избранных маршрутов пользователя 
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное получение данных
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/GetRoutes'
        '401':
          description: Невалидный токен
    post:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
       - users
      summary: Добавление маршрута в "Избранное" 
      security:
       - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFavoriteRoute'
      responses:
       '200':
         description: Успешное добавление маршрута в "Избранное"
       '401':
         description: Невалидный токен
  
  /users/{userId}/routes/favorite/{routeId}:
    delete:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
        - name: routeId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Удаление маршрута из категории "Избранное" 
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Успешное удаление маршрута
        '401':
          description: Невалидный токен
        '404':
          description: Невалидный id
         
  /users/{userId}/friends:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Получение списка друзей пользователя 
      security:
       - bearerAuth: []
      responses:
       '200':
         description: Успешное получение данных
         content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetFriends'
       '401':
         description: Невалидный токен
  
  /users/{userId}/friends/{friendId}:
    delete:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
        - name: friendId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Удаление пользователя из списка друзей 
      security:
       - bearerAuth: []
      responses:
       '204':
         description: Успешное удаление данных
       '401':
         description: Невалидный токен
  
  /users/{userId}/friends/request:
    post:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Создание запроса на добавление в друзья
      security:
       - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostFriendsRequest'
      responses:
       '201':
         description: Успешное создание запроса
       '401':
         description: Невалидный токен
  
  /users/{userId}/friends/accepted:
    post:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Принятие запроса на добавление в друзья
      security:
       - bearerAuth: []
      responses:
       '204':
         description: Успешное принятие запроса
       '401':
         description: Невалидный токен
  
  /users/{userId}/achievements:
    get:
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: number
      tags:
        - users
      summary: Получение списка достижений пользователя 
      security:
       - bearerAuth: []
      responses:
       '200':
         description: Успешное получение данных
         content: 
            application/json:
              schema: 
               $ref: '#/components/schemas/GetUserAchievements'
       '401':
         description: Невалидный токен
  
  /achievements:
    get:
      tags:
        - achievements
      summary: Получение списка достижений, доступных в системе
      security:
       - bearerAuth: []
      responses:
       '200':
         description: Успешное получение данных
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAchievements'
       '401':
         description: Невалидный токен
    post:
      tags:
        - achievements
      summary: Создание достижения
      security:
       - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAchievement'
      responses:
       '201':
         description: Успешное создание достижения
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAchievement'
       '401':
         description: Невалидный токен
  
  /achievements/{achievementId}:
    patch:
      parameters:
        - name: achievementId
          in: path
          required: true
          schema:
            type: number
      tags:
        - achievements
      summary: Изменение данных достижения
      security:
       - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAchievement'
      responses:
       '201':
         description: Успешное изменение достижения
         content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAchievement'
       '401':
         description: Невалидный токен
    delete:
      parameters:
        - name: achievementId
          in: path
          required: true
          schema:
            type: number
      tags:
        - achievements
      summary: Изменение достижения по идентификатору
      security:
       - bearerAuth: []
      responses:
       '204':
         description: Успешное удаление достижения
       '401':
         description: Невалидный токен
      
      

components:
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PaginationMeta:
      type: object
      properties:
        prev_page:
          type: string
          example: "http://localhost:80/endpoint?page=1"
        current_page:
          type: string
          example: "http://localhost:80/endpoint?page=2"
        next_page:
          type: string
          example: "http://localhost:80/endpoint?page=3"
        
  
    AuthInfo:
      type: object
      properties:
        email:
          type: string
          example: "pochta@gmail.com"
        password:
          type: string
          example: "*******************"
          
    AuthError:
      type: object
      properties:
        errors: 
          type: object
          properties:
            email:
              type: string
              example: "Поле email должно быть строкой"
            password:
              type: string
              example: "Поле password должно быть строкой"
    AuthSuccess:
      type: object
      properties:
        data:
          type: object
          properties:
            access_token: 
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
              
    ShortPlace:
      type: object
      properties:
        id: 
          type: integer
          example: 12
        title:
          type: string
          example: "Парк Ангелов"
        lat:
          type: number
          example: 12345.65
        lon:
          type: number
          example: 98983.34
        rating:
          type: number
          example: 4.5
        image:
          type: object
          properties:
            id:
              type: integer
              example: 34
            path:
              type: string
              example: "images/LKJkljg33POJB123oij.jpeg"
        locality:
          type: object
          properties:
            id:
              type: integer
              example: 60
            title:
              type: string
              example: "Кемерово"
    FullPlace:
      type: object
      properties:
        id: 
          type: integer
          example: 12
        title:
          type: string
          example: "Парк Ангелов"
        lat:
          type: number
          example: 12345.65
        lon:
          type: number
          example: 98983.34
        rating:
          type: number
          example: 4.5
        description:
          type: string
          example: "Одно из прекраснейших мест города Кемерово..."
        images:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 34
              path:
                type: string
                example: "images/LKJkljg33POJB123oij.jpeg"
        locality:
          type: object
          properties:
            id:
              type: integer
              example: 60
            title:
              type: string
              example: "Кемерово"
    
    VeryShortPlace:
      type: object
      properties:
        id:
          type: number
          example: 1
        image:
          type: string
          example: "images/aboba.production.jpeg"
  
    GetPlaces:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ShortPlace'
        meta:
          type: object
          oneOf:
            - $ref: '#/components/schemas/PaginationMeta'
            
    GetPlace:
      type: object
      properties:
        data:
          type: object
          oneOf:
            - $ref: '#/components/schemas/FullPlace'
  
    UserShort:
      type: object
      properties:
        id:
          type: integer
          example: 24
        username:
          type: string
          example: "Юрий Константинопольский"
        avatar:
          type: string
          example: "images/default.jpeg"
      
    Comment:
      type: object
      properties:
        id: 
          type: integer
          example: 55
        comment:
          type: string
          example: "Крутое место"
        created_at:
          type: string
          example: "2023-10-01 11:16:54"
        author:
          type: object
          oneOf:
            - $ref: '#/components/schemas/UserShort'
    
    PostComment:
      type: object
      properties:
        comment:
          type: string
          example: "Одно из прекраснейших мест города Кемерово..."
            
    GetComments:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf: 
              - $ref: '#/components/schemas/Comment' 
        meta:
          type: object
          oneOf:
            - $ref: '#/components/schemas/PaginationMeta'
              
    GetComment:
      type: object
      properties:
        data:
          type: object
          oneOf:
            - $ref: '#/components/schemas/Comment'

    PostRating:
      type: object
      properties:
        rating:
          type: number
          example: 4.5
  
    
    ShortRoute:
      type: object
      properties:
        id: 
          type: number
          example: 5
        title:
          type: string
          example: "Супер маршрут по лесу"
        route_points:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/VeryShortPlace'
        creator: 
          type: object
          oneOf:
            - $ref: '#/components/schemas/UserShort'
            
    FullRoute:
      type: object
      properties:
        id: 
          type: number
          example: 5
        title:
          type: string
          example: "Супер маршрут по лесу"
        route_points:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                example: 1
              index:
                type: number
                example: 1
              place:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/ShortPlace'
        creator: 
          type: object
          oneOf:
            - $ref: '#/components/schemas/UserShort'
    
    PatchRoute:
      type: object
      properties:
        title:
          type: string
          example: "Другой супер маршрут по лесу"
  
    GetRoutes:
      type: object
      properties:
        data: 
          type: array
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/ShortRoute'
        meta:
          type: object
          oneOf:
            - $ref: '#/components/schemas/PaginationMeta'
    
    GetRoute:
      type: object
      properties:
        data:
          type: object
          oneOf:
            - $ref: '#/components/schemas/FullRoute'
            
    PostRoute:
      type: object
      properties:
        title:
          type: string
          example: "Супер маршрут по лесу"
        route_points:
          type: array
          items:
            type: object
            properties:
              index:
                type: number
                example: 2
              place_id:
                type: number
                example: 2
    
    PostFavoriteRoute:
      type: object
      properties:
        id:
          type: number
          example: 1
    
    PutRoute:
      type: object
      oneOf:
        - $ref: '#/components/schemas/PostRoute'

    User:
      type: object
      properties:
        id:
          type: number
          example: 1
        username:
          type: number
          example: "Aboba"
        avatar:
          type: string
          example: "images/avatar.jpg"
    
    UserAvatar:
      type: object
      properties:
        path:
          type: string
          example: 'images/avatar1.jpeg'
    
    GetUserAvatar:
      type: object
      properties:
        data:
          type: object
          oneOf:
            - $ref: '#/components/schemas/UserAvatar'
            
    PostUserPassword:
      type: object
      properties:
        old_password:
          type: string
          example: 'old_password'
        new_password:
          type: string
          example: 'new_password'
    
    GetUser:
      type: object
      properties:
        data:
          type: object
          oneOf:
            - $ref: '#/components/schemas/User'
    
    PatchUser:
      type: object
      properties:
        username:
          type: string
          example: 'vovan1337'
    
    GetFriends:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/User'
    
    PostFriendsRequest:
      type: object
      properties:
        friend_id:
          type: number
          example: 1
    
    Achievement:
      type: object
      properties:
        id:
          type: number
          example: 5
        title:
          type: string
          example: 'Исследователь'
        description:
          type: string
          example: 'Необходимо пройти 1 маршрут'
        target:
          type: number
          example: 1
    
    GetAchievement:
      type: object
      properties:
        data: 
          type: object
          oneOf:
            - $ref: '#/components/schemas/Achievement'
    
    GetUserAchievements:
      type: object
      properties:
        data: 
          type: array
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/Achievement'
            properties:
              current_progress:
                type: number
                example: 0
    
    PostAchievement:
      type: object
      properties:
        title:
          type: string
          example: 'Исследователь'
        description:
          type: string
          example: 'Необходимо пройти 1 маршрут'
        target:
          type: number
          example: 1
    
    PatchAchievement:
      type: object
      properties:
        title:
          type: string
          example: 'Исследователь'
        description:
          type: string
          example: 'Необходимо пройти 1 маршрут'
        target:
          type: number
          example: 1
    
    GetAchievements:
      type: object
      properties:
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Achievement'
            
          
